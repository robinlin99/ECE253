module lab4p1(SW, HEX0, HEX1);

	input [9:0] SW;
	output [0:6] HEX0;
	output [0:6] HEX1;
	
	wire [3:0] in0;
	wire [3:0] in1;
		
	assign in0[3:0] = SW[3:0];
	assign in1[3:0] = SW[7:4];
	

	assign HEX0[0] = ((~in0[3])&(~in0[2])&(~in0[1])&in0[0]) | ((~in0[3])&in0[2]&(~in0[0]));
	assign HEX1[0] = ((~in1[3])&(~in1[2])&(~in1[1])&in1[0]) | ((~in1[3])&in1[2]&(~in1[0]));
	
	assign HEX0[1] = ((~in0[3])&in0[2]&(~in0[1])&in0[0]) | ((~in0[3])&in0[2]&in0[1]&(~in0[0]));
	assign HEX1[1] = ((~in1[3])&in1[2]&(~in1[1])&in1[0]) | ((~in1[3])&in1[2]&in1[1]&(~in1[0]));
	
	assign HEX0[2] = ((~in0[3])&(~in0[2])&in0[1]&(~in0[0]));
	assign HEX1[2] = ((~in1[3])&(~in1[2])&in1[1]&(~in1[0]));
	
	assign HEX0[3] = ((~in0[1])&(in0[0])&(~in0[2])) | ((~in0[3])&in0[2]&in0[1]&in0[0]) | ((~in0[3])&in0[2]&(~in0[1])&(~in0[0]));
	assign HEX1[3] = ((~in1[1])&(in1[0])&(~in1[2])) | ((~in1[3])&in1[2]&in1[1]&in1[0]) | ((~in1[3])&in1[2]&(~in1[1])&(~in1[0]));
	
	assign HEX0[4] = ((~in0[3])&(in0[0])) | ((in0[3])&(~in0[2])&(~in0[1])&in0[0]) | ((~in0[3])&in0[2]&(~in0[1])&(~in0[0]));
	assign HEX1[4] = ((~in1[3])&(in1[0])) | ((in1[3])&(~in1[2])&(~in1[1])&in1[0]) | ((~in1[3])&in1[2]&(~in1[1])&(~in1[0]));
	
	assign HEX0[5] = ((~in0[3])&(in0[0])&in0[1]) | ((~in0[3])&(~in0[2])&(in0[1])&(~in0[0])) | ((~in0[3])&(~in0[2])&(~in0[1])&(in0[0]));
	assign HEX1[5] = ((~in1[3])&(in1[0])&in1[1]) | ((~in1[3])&(~in1[2])&(in1[1])&(~in1[0])) | ((~in1[3])&(~in1[2])&(~in1[1])&(in1[0]));
	
	assign HEX0[6] = ((~in0[3])&(~in0[2])&(~in0[1])) | ((~in0[3])&in0[2]&in0[1]&in0[0]);
	assign HEX1[6] = ((~in1[3])&(~in1[2])&(~in1[1])) | ((~in1[3])&in1[2]&in1[1]&in1[0]);
endmodule