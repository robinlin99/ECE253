module part4(KEY0,SW,HEX0,HEX1,HEX2,HEX3);
	input [9:0]SW;
	input KEY0;
	output [0:6]HEX0;
	output [0:6]HEX1;
	output [0:6]HEX2;
	output [0:6]HEX3;
	wire clear;
	wire clc;
	wire enable;
	wire [15:0]Q;
	assign clear = SW[0];
	assign enable = SW[1];
	assign clc = KEY0;
	up_counter counter16bit(Q,enable,clc,clear);
	driver driver1(Q[3:0],HEX0);
	driver driver2(Q[7:4],HEX1);
	driver driver3(Q[11:8],HEX2);
	driver driver4(Q[15:12],HEX3);
endmodule

module driver(x,z);
	input [3:0]x;
	output reg [6:0]z;
	always @*
		case (x)
4'b0000 :      	//Hexadecimal 0
z = 7'b1111110;
4'b0001 :    		//Hexadecimal 1
z = 7'b0110000  ;
4'b0010 :  		// Hexadecimal 2
z = 7'b1101101 ; 
4'b0011 : 		// Hexadecimal 3
z = 7'b1111001 ;
4'b0100 :		// Hexadecimal 4
z = 7'b0110011 ;
4'b0101 :		// Hexadecimal 5
z = 7'b1011011 ;  
4'b0110 :		// Hexadecimal 6
z = 7'b1011111 ;
4'b0111 :		// Hexadecimal 7
z = 7'b1110000;
4'b1000 :     		 //Hexadecimal 8
z = 7'b1111111;
4'b1001 :    		//Hexadecimal 9
z = 7'b1111011 ;
4'b1010 :  		// Hexadecimal A
z = 7'b1110111 ; 
4'b1011 : 		// Hexadecimal B
z = 7'b0011111;
4'b1100 :		// Hexadecimal C
z = 7'b1001110 ;
4'b1101 :		// Hexadecimal D
z = 7'b0111101 ;
4'b1110 :		// Hexadecimal E
z = 7'b1001111 ;
4'b1111 :		// Hexadecimal F
z = 7'b1000111 ;
endcase

endmodule

module up_counter   (
q     ,  // Output of the counter
enable  ,  // enable for counter
clk     ,  // clock Input
reset      // reset Input
);
//----------Output Ports--------------
    output [15:0] q;
	 reg [15:0]Q;
//------------Input Ports--------------
     input enable, clk, reset;
	  
//-------------Code Starts Here-------
always @(posedge clk)
if (~reset) begin
  Q <= 16'b0 ;
end else if (enable) begin
  Q <= Q + 1;
end
assign q = Q;
endmodule