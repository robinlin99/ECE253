module part2(HEX0,HEX1,HEX2,HEX3,HEX4,HEX5,SW,LEDR,KEY0,KEY1);
	input [9:0]SW;
	input KEY0;
	input KEY1;
	output [9:0]LEDR;
	output [0:6]HEX0;
	output [0:6]HEX1;
	output [0:6]HEX2;
	output [0:6]HEX3;
	output [0:6]HEX4;
	output [0:6]HEX5;
	wire [7:0]A;
	wire [7:0]B;
	ff ff0(SW[0],KEY1,KEY0,A[0]);
	ff ff1(SW[1],KEY1,KEY0,A[1]);
	ff ff2(SW[2],KEY1,KEY0,A[2]);
	ff ff3(SW[3],KEY1,KEY0,A[3]);
	ff ff4(SW[4],KEY1,KEY0,A[4]);
	ff ff5(SW[5],KEY1,KEY0,A[5]);
	ff ff6(SW[6],KEY1,KEY0,A[6]);
	ff ff7(SW[7],KEY1,KEY0,A[7]);
	assign B[7:0] = SW[7:0];
	
	reg [6:0]A_hex0;
	reg [6:0]A_hex1;
	reg [6:0]B_hex0;
	reg [6:0]B_hex1;

	driver AHEX2(A[3:0],HEX2);
	driver AHEX3(A[7:4],HEX3);
	driver BHEX0(B[3:0],HEX0);
	driver BHEX1(B[7:4],HEX1);
	wire [8:0]S;
	assign S[8:0] = A[7:0] + B[7:0];
	driver S0(S[3:0],HEX4);
	driver s1(S[7:4],HEX5);
	assign LEDR[0] = S[8];
endmodule

module ripple_adder(B,A,cin,sum,cout);
	input [7:0]B;
	input [7:0]A;
	input cin;
	output [8:0]sum;
	output cout;
	
	wire c1;
	wire c2;
	wire c3;
	wire c4;
	wire c5;
	wire c6;
	wire c7;
	wire [7:0]S;
	
	fa fa0(B[0],A[0],cin,c1,S[0]);
	fa fa1(B[1],A[1],c1,c2,S[1]);
	fa fa2(B[2],A[2],c2,c3,S[2]);
	fa fa3(B[3],A[3],c3,c4,S[3]);
	fa fa4(B[4],A[4],c4,c5,S[4]);
	fa fa5(B[5],A[5],c5,c6,S[5]);
	fa fa6(B[6],A[6],c6,c7,S[6]);
	fa fa7(B[7],A[7],c7,cout,S[7]);
	assign sum[7:0] = S[7:0];
	assign sum[8] = cout;
endmodule

module fa(b,a,ci,co,s);
	input b,a,ci;
	output co,s;
	assign co = b&a | (~b)&a&ci | b&(~a)&ci;
	assign s = ((~b)&(~a)&ci) | ((~b)&a&(~ci)) | (b&(~a)&(~ci)) | (b&a&ci);
endmodule

module ff (
data  , // Data Input
clk    , // Clock Input
reset , // Reset input, active-low 
q         // Q output
);
//-----------Input Ports---------------
input data, clk, reset ; 

//-----------Output Ports---------------
output q;

//------------Internal Variables--------
reg q;

//-------------Code Starts Here---------
always @ ( posedge clk or negedge reset)
if (~reset) begin
  q <= 1'b0;
end  
else begin
  q <= data;
end
endmodule //End Of Module dff_async_reset


module driver(x,z);
	input [3:0]x;
	output reg [6:0]z;
	always @*
		case (x)
4'b0000 :      	//Hexadecimal 0
z = 7'b1111110;
4'b0001 :    		//Hexadecimal 1
z = 7'b0110000  ;
4'b0010 :  		// Hexadecimal 2
z = 7'b1101101 ; 
4'b0011 : 		// Hexadecimal 3
z = 7'b1111001 ;
4'b0100 :		// Hexadecimal 4
z = 7'b0110011 ;
4'b0101 :		// Hexadecimal 5
z = 7'b1011011 ;  
4'b0110 :		// Hexadecimal 6
z = 7'b1011111 ;
4'b0111 :		// Hexadecimal 7
z = 7'b1110000;
4'b1000 :     		 //Hexadecimal 8
z = 7'b1111111;
4'b1001 :    		//Hexadecimal 9
z = 7'b1111011 ;
4'b1010 :  		// Hexadecimal A
z = 7'b1110111 ; 
4'b1011 : 		// Hexadecimal B
z = 7'b0011111;
4'b1100 :		// Hexadecimal C
z = 7'b1001110 ;
4'b1101 :		// Hexadecimal D
z = 7'b0111101 ;
4'b1110 :		// Hexadecimal E
z = 7'b1001111 ;
4'b1111 :		// Hexadecimal F
z = 7'b1000111 ;
endcase

endmodule